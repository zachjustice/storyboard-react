// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  choice: (where?: ChoiceWhereInput) => Promise<boolean>;
  option: (where?: OptionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  choice: (where: ChoiceWhereUniqueInput) => ChoicePromise;
  choices: (
    args?: {
      where?: ChoiceWhereInput;
      orderBy?: ChoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Choice>;
  choicesConnection: (
    args?: {
      where?: ChoiceWhereInput;
      orderBy?: ChoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChoiceConnectionPromise;
  option: (where: OptionWhereUniqueInput) => OptionPromise;
  options: (
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Option>;
  optionsConnection: (
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OptionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChoice: (data: ChoiceCreateInput) => ChoicePromise;
  updateChoice: (
    args: { data: ChoiceUpdateInput; where: ChoiceWhereUniqueInput }
  ) => ChoicePromise;
  updateManyChoices: (
    args: { data: ChoiceUpdateManyMutationInput; where?: ChoiceWhereInput }
  ) => BatchPayloadPromise;
  upsertChoice: (
    args: {
      where: ChoiceWhereUniqueInput;
      create: ChoiceCreateInput;
      update: ChoiceUpdateInput;
    }
  ) => ChoicePromise;
  deleteChoice: (where: ChoiceWhereUniqueInput) => ChoicePromise;
  deleteManyChoices: (where?: ChoiceWhereInput) => BatchPayloadPromise;
  createOption: (data: OptionCreateInput) => OptionPromise;
  updateOption: (
    args: { data: OptionUpdateInput; where: OptionWhereUniqueInput }
  ) => OptionPromise;
  updateManyOptions: (
    args: { data: OptionUpdateManyMutationInput; where?: OptionWhereInput }
  ) => BatchPayloadPromise;
  upsertOption: (
    args: {
      where: OptionWhereUniqueInput;
      create: OptionCreateInput;
      update: OptionUpdateInput;
    }
  ) => OptionPromise;
  deleteOption: (where: OptionWhereUniqueInput) => OptionPromise;
  deleteManyOptions: (where?: OptionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  choice: (
    where?: ChoiceSubscriptionWhereInput
  ) => ChoiceSubscriptionPayloadSubscription;
  option: (
    where?: OptionSubscriptionWhereInput
  ) => OptionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChoiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OptionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  nextChoice?: ChoiceWhereInput;
  AND?: OptionWhereInput[] | OptionWhereInput;
  OR?: OptionWhereInput[] | OptionWhereInput;
  NOT?: OptionWhereInput[] | OptionWhereInput;
}

export interface ChoiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  options_every?: OptionWhereInput;
  options_some?: OptionWhereInput;
  options_none?: OptionWhereInput;
  AND?: ChoiceWhereInput[] | ChoiceWhereInput;
  OR?: ChoiceWhereInput[] | ChoiceWhereInput;
  NOT?: ChoiceWhereInput[] | ChoiceWhereInput;
}

export type OptionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ChoiceCreateInput {
  content: String;
  options?: OptionCreateManyWithoutNextChoiceInput;
}

export interface OptionCreateManyWithoutNextChoiceInput {
  create?:
    | OptionCreateWithoutNextChoiceInput[]
    | OptionCreateWithoutNextChoiceInput;
  connect?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
}

export interface OptionCreateWithoutNextChoiceInput {
  description: String;
}

export interface ChoiceUpdateInput {
  content?: String;
  options?: OptionUpdateManyWithoutNextChoiceInput;
}

export interface OptionUpdateManyWithoutNextChoiceInput {
  create?:
    | OptionCreateWithoutNextChoiceInput[]
    | OptionCreateWithoutNextChoiceInput;
  delete?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  connect?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  set?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  disconnect?: OptionWhereUniqueInput[] | OptionWhereUniqueInput;
  update?:
    | OptionUpdateWithWhereUniqueWithoutNextChoiceInput[]
    | OptionUpdateWithWhereUniqueWithoutNextChoiceInput;
  upsert?:
    | OptionUpsertWithWhereUniqueWithoutNextChoiceInput[]
    | OptionUpsertWithWhereUniqueWithoutNextChoiceInput;
  deleteMany?: OptionScalarWhereInput[] | OptionScalarWhereInput;
  updateMany?:
    | OptionUpdateManyWithWhereNestedInput[]
    | OptionUpdateManyWithWhereNestedInput;
}

export interface OptionUpdateWithWhereUniqueWithoutNextChoiceInput {
  where: OptionWhereUniqueInput;
  data: OptionUpdateWithoutNextChoiceDataInput;
}

export interface OptionUpdateWithoutNextChoiceDataInput {
  description?: String;
}

export interface OptionUpsertWithWhereUniqueWithoutNextChoiceInput {
  where: OptionWhereUniqueInput;
  update: OptionUpdateWithoutNextChoiceDataInput;
  create: OptionCreateWithoutNextChoiceInput;
}

export interface OptionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: OptionScalarWhereInput[] | OptionScalarWhereInput;
  OR?: OptionScalarWhereInput[] | OptionScalarWhereInput;
  NOT?: OptionScalarWhereInput[] | OptionScalarWhereInput;
}

export interface OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput;
  data: OptionUpdateManyDataInput;
}

export interface OptionUpdateManyDataInput {
  description?: String;
}

export interface ChoiceUpdateManyMutationInput {
  content?: String;
}

export interface OptionCreateInput {
  description: String;
  nextChoice?: ChoiceCreateOneWithoutOptionsInput;
}

export interface ChoiceCreateOneWithoutOptionsInput {
  create?: ChoiceCreateWithoutOptionsInput;
  connect?: ChoiceWhereUniqueInput;
}

export interface ChoiceCreateWithoutOptionsInput {
  content: String;
}

export interface OptionUpdateInput {
  description?: String;
  nextChoice?: ChoiceUpdateOneWithoutOptionsInput;
}

export interface ChoiceUpdateOneWithoutOptionsInput {
  create?: ChoiceCreateWithoutOptionsInput;
  update?: ChoiceUpdateWithoutOptionsDataInput;
  upsert?: ChoiceUpsertWithoutOptionsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ChoiceWhereUniqueInput;
}

export interface ChoiceUpdateWithoutOptionsDataInput {
  content?: String;
}

export interface ChoiceUpsertWithoutOptionsInput {
  update: ChoiceUpdateWithoutOptionsDataInput;
  create: ChoiceCreateWithoutOptionsInput;
}

export interface OptionUpdateManyMutationInput {
  description?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface ChoiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChoiceWhereInput;
  AND?: ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput;
  OR?: ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput;
  NOT?: ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput;
}

export interface OptionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OptionWhereInput;
  AND?: OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput;
  OR?: OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput;
  NOT?: OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Choice {
  id: ID_Output;
  content: String;
}

export interface ChoicePromise extends Promise<Choice>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  options: <T = FragmentableArray<Option>>(
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChoiceSubscription
  extends Promise<AsyncIterator<Choice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  options: <T = Promise<AsyncIterator<OptionSubscription>>>(
    args?: {
      where?: OptionWhereInput;
      orderBy?: OptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Option {
  id: ID_Output;
  description: String;
}

export interface OptionPromise extends Promise<Option>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  nextChoice: <T = ChoicePromise>() => T;
}

export interface OptionSubscription
  extends Promise<AsyncIterator<Option>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  nextChoice: <T = ChoiceSubscription>() => T;
}

export interface ChoiceConnection {
  pageInfo: PageInfo;
  edges: ChoiceEdge[];
}

export interface ChoiceConnectionPromise
  extends Promise<ChoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChoiceEdge>>() => T;
  aggregate: <T = AggregateChoicePromise>() => T;
}

export interface ChoiceConnectionSubscription
  extends Promise<AsyncIterator<ChoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChoiceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChoiceEdge {
  node: Choice;
  cursor: String;
}

export interface ChoiceEdgePromise extends Promise<ChoiceEdge>, Fragmentable {
  node: <T = ChoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChoiceEdgeSubscription
  extends Promise<AsyncIterator<ChoiceEdge>>,
    Fragmentable {
  node: <T = ChoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChoice {
  count: Int;
}

export interface AggregateChoicePromise
  extends Promise<AggregateChoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChoiceSubscription
  extends Promise<AsyncIterator<AggregateChoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OptionConnection {
  pageInfo: PageInfo;
  edges: OptionEdge[];
}

export interface OptionConnectionPromise
  extends Promise<OptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OptionEdge>>() => T;
  aggregate: <T = AggregateOptionPromise>() => T;
}

export interface OptionConnectionSubscription
  extends Promise<AsyncIterator<OptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOptionSubscription>() => T;
}

export interface OptionEdge {
  node: Option;
  cursor: String;
}

export interface OptionEdgePromise extends Promise<OptionEdge>, Fragmentable {
  node: <T = OptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OptionEdgeSubscription
  extends Promise<AsyncIterator<OptionEdge>>,
    Fragmentable {
  node: <T = OptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOption {
  count: Int;
}

export interface AggregateOptionPromise
  extends Promise<AggregateOption>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOptionSubscription
  extends Promise<AsyncIterator<AggregateOption>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChoiceSubscriptionPayload {
  mutation: MutationType;
  node: Choice;
  updatedFields: String[];
  previousValues: ChoicePreviousValues;
}

export interface ChoiceSubscriptionPayloadPromise
  extends Promise<ChoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChoicePreviousValuesPromise>() => T;
}

export interface ChoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChoicePreviousValuesSubscription>() => T;
}

export interface ChoicePreviousValues {
  id: ID_Output;
  content: String;
}

export interface ChoicePreviousValuesPromise
  extends Promise<ChoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface ChoicePreviousValuesSubscription
  extends Promise<AsyncIterator<ChoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface OptionSubscriptionPayload {
  mutation: MutationType;
  node: Option;
  updatedFields: String[];
  previousValues: OptionPreviousValues;
}

export interface OptionSubscriptionPayloadPromise
  extends Promise<OptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OptionPreviousValuesPromise>() => T;
}

export interface OptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OptionPreviousValuesSubscription>() => T;
}

export interface OptionPreviousValues {
  id: ID_Output;
  description: String;
}

export interface OptionPreviousValuesPromise
  extends Promise<OptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface OptionPreviousValuesSubscription
  extends Promise<AsyncIterator<OptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Choice",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Option",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
