type Query {
    choices: [Choice!]!
    choice(id: String!): Choice!
}

type Mutation {
    createChoice(content: String!): Choice!
    createOption(parentChoiceId: String!, description: String!): Option!

    updateChoice(id: String!, content: String, nextOptionId: String): Choice!
    updateOption(id: String!, description: String, parentChoiceId: String, nextChoiceId: String): Option!

    deleteChoice(id: String!): Choice!
    deleteOption(id: String!): Option!
    # user signup, login
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
}

type Choice {
    id: ID!
    content: String!
    options: [Option!]!
#    postedBy: User
}

type Option {
    id: ID!
    description: String!
    nextChoice: Choice
}
