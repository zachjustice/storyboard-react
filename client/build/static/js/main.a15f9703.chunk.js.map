{"version":3,"sources":["components/Option.js","components/Choice.js","components/Storyboard.js","services/Choices.service.js","App.js","serviceWorker.js","index.js"],"names":["Option","props","option","value","spanClass","isSelected","react_default","a","createElement","onClick","className","description","Choice","choice","content","options","map","key","id","Storyboard","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","_this","console","log","choices","index","React","Component","INITIAL_CHOICE_ID","ChoicesService","choiceId","selectedChoice","find","fetchChoice","newChoice","createNewChoice","push","randomWords","Array","randomInt","fill","createNewOption","next","min","max","Math","random","str","num","i","words","length","App","choicesService","state","cloneDeep","getChoice","choose","parentChoice","selectedOption","setState","forEach","slice","concat","objectSpread","Storyboard_Storyboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a15f9703.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Option(props) {\n    const option = props.value || {};\n\n    let spanClass = 'OptionText';\n    if (option.isSelected) spanClass += ' bold';\n\n    return (\n        <li onClick={() => props.onClick(option)}>\n            <span className={spanClass}>{option.description}</span>\n        </li>\n    )\n}\n","import React from 'react';\nimport {Option} from \"./Option\";\n\nexport function Choice(props) {\n    const renderOptions = (options) => {\n        return (options || []).map(option => (\n            <Option value={option}\n                    key={'option-' + option.id}\n                    onClick={props.onClick} />\n        ));\n    };\n\n    const choice = props.choice || {};\n    const content = choice.content;\n\n    return (\n        <div className='choice'>\n            <p>{content}</p>\n            <ul>\n                {renderOptions(choice.options)}\n            </ul>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Choice} from \"./Choice\";\n\nexport class Storyboard extends React.Component {\n    render() {\n        console.log('choices', this.props.choices);\n        return (\n            <div className='storyboard'>\n                {this.props.choices.map((choice, index) => (\n                    <Choice key={'choice-' + choice.id}\n                            choice={choice}\n                            onClick={(option) => this.props.onClick(choice, option, index)}/>\n                ))}\n            </div>\n        )\n    }\n}\n\nStoryboard.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        content: PropTypes.string.isRequired,\n        options: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            next: PropTypes.number.isRequired,\n            description: PropTypes.string.isRequired,\n        }))\n    }))\n};\n\n","export const INITIAL_CHOICE_ID = 1;\n\nexport class ChoicesService {\n    choiceId = INITIAL_CHOICE_ID;\n    choices = [];\n\n    getChoice(choiceId) {\n        let selectedChoice = this.choices.find(choice => choice.id === choiceId);\n\n        if (!selectedChoice) {\n            selectedChoice = this.fetchChoice(choiceId);\n        }\n\n        return selectedChoice;\n    }\n\n    fetchChoice(choiceId) {\n        const newChoice = this.createNewChoice(choiceId);\n        this.choices.push(newChoice);\n        return newChoice;\n    }\n\n    createNewChoice(choiceId) {\n        return {\n            id: choiceId,\n            content: randomWords(10, 20),\n            options: Array(randomInt(2,5)).fill(null).map(() => this.createNewOption())\n        };\n    }\n\n    createNewOption() {\n        return {\n            id: randomInt(0, 1000000000),\n            description: randomWords(3, 7),\n            next: ++this.choiceId\n        }\n    }\n}\n\nfunction randomInt(min, max) {\n    return ( Math.random() * ( max - min ) + min ) >> 0\n}\n\nfunction randomWords(min, max) {\n    let str = '';\n\n    const num = randomInt(min, max);\n    for (let i = 0; i < num; i++) {\n        str += ' ' + words[Math.random() * words.length >> 0];\n    }\n\n    return str;\n}\n\nconst words = [\n    'Lorem',\n    'ipsum',\n    'dolor',\n    'sit',\n    'amet',\n    'consectetur',\n    'adipiscing',\n    'elit',\n    'sed',\n    'do',\n    'eiusmod',\n    'tempor',\n    'incididunt',\n    'ut',\n    'labore',\n    'et',\n    'dolore',\n    'magna',\n    'aliqua',\n    'Ut',\n    'enim',\n    'ad',\n    'minim',\n    'veniam',\n    'quis',\n    'nostrud',\n    'exercitation',\n    'ullamco',\n    'laboris',\n    'nisi',\n    'ut',\n    'aliquip',\n    'ex',\n    'ea',\n    'commodo',\n    'consequat',\n    'Duis',\n    'aute',\n    'irure',\n    'dolor',\n    'in',\n    'reprehenderit',\n    'in',\n    'voluptate',\n    'velit',\n    'esse',\n    'cillum',\n    'dolore',\n    'eu',\n    'fugiat',\n    'nulla',\n    'pariatur',\n    'Excepteur',\n    'sint',\n    'occaecat',\n    'cupidatat',\n    'non',\n    'proident',\n    'sunt',\n    'in',\n    'culpa',\n    'qui',\n    'officia',\n    'deserunt',\n    'mollit',\n    'anim',\n    'id',\n    'est',\n    'laborum'\n];\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Storyboard} from './components/Storyboard';\nimport {ChoicesService, INITIAL_CHOICE_ID} from './services/Choices.service';\nimport { cloneDeep } from 'lodash';\n\n\nclass App extends Component {\n    choicesService = new ChoicesService();\n    state = { choices: [ cloneDeep(this.choicesService.getChoice(INITIAL_CHOICE_ID)) ] };\n\n    choose = (parentChoice, selectedOption, index) => {\n        this.setState((state) => {\n            (parentChoice.options || []).forEach(option => {\n                option.isSelected = option.id === selectedOption.id;\n            });\n\n            const choices = state.choices\n                .slice(0, index + 1)\n                .concat(cloneDeep(this.choicesService.getChoice(selectedOption.next)));\n\n            return {\n                ...state,\n                choices,\n            }\n        });\n    };\n\n    render() {\n        console.log('App current choices:', this.state.choices);\n        return (\n            <div className=\"App\">\n                <Storyboard choices={this.state.choices} onClick={this.choose}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}